'use strict';

require('fragmented');

require('./easyui-jsx');

var easyui = require('easyui'),
    Element = easyui.Element;


var Contents = require('./docs/sections/contents'),
    Introduction = require('./docs/sections/introduction'),
    JSXIsGreat = require('./docs/sections/jsxIsGreat'),
    GettingStarted = require('./docs/sections/gettingStarted'),
    AppendingElementsToTheDOM = require('./docs/sections/appendingElementsToTheDOM'),
    FunctionalElements = require('./docs/sections/functionalElements'),
    EasyUIElements = require('./docs/sections/easyUIElements'),
    TheRenderMethod = require('./docs/sections/theRenderMethod'),
    ExtendingAnEasyUIClass = require('./docs/sections/extendingAnEasyUIClass'),
    TheExampleOfThisDocumentation = require('./docs/sections/theExampleOfThisDocumentation'),
    TheElementClass = require('./docs/sections/theElementClass'),
    ASimpleForm = require('./docs/sections/aSimpleForm');

var introduction = React.createElement(Introduction, null),
    fragmentToSectionMap = {
  introduction: introduction,
  contents: React.createElement(Contents, null),
  jsxIsGreat: React.createElement(JSXIsGreat, null),
  gettingStarted: React.createElement(GettingStarted, null),
  appendingElementsToTheDOM: React.createElement(AppendingElementsToTheDOM, null),
  functionalElements: React.createElement(FunctionalElements, null),
  easyUIElements: React.createElement(EasyUIElements, null),
  theRenderMethod: React.createElement(TheRenderMethod, null),
  extendingAnEasyUIClass: React.createElement(ExtendingAnEasyUIClass, null),
  theExampleOfThisDocumentation: React.createElement(TheExampleOfThisDocumentation, null),
  theElementClass: React.createElement(TheElementClass, null),
  aSimpleForm: React.createElement(ASimpleForm, null)
};

var insertSections = function insertSections() {
  var headerDOMElement = document.querySelector('header'),
      header = Element.fromDOMElement(headerDOMElement);

  forEachSection(function (section) {
    section.insertAfter(header);
  });
};

var revealSection = function revealSection() {
  forEachSection(function (section) {
    section.hide();
  });

  var section = fragmentToSectionMap[fragment] || introduction;

  section.show();
};

var forEachSection = function forEachSection(callback) {
  var fragments = Object.keys(fragmentToSectionMap);

  fragments.forEach(function (fragment) {
    var section = fragmentToSectionMap[fragment];

    callback(section);
  });
};

insertSections();

fragment.onChange(revealSection);

revealSection();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9kb2NzLmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJFbGVtZW50IiwiZWFzeXVpIiwiQ29udGVudHMiLCJJbnRyb2R1Y3Rpb24iLCJKU1hJc0dyZWF0IiwiR2V0dGluZ1N0YXJ0ZWQiLCJBcHBlbmRpbmdFbGVtZW50c1RvVGhlRE9NIiwiRnVuY3Rpb25hbEVsZW1lbnRzIiwiRWFzeVVJRWxlbWVudHMiLCJUaGVSZW5kZXJNZXRob2QiLCJFeHRlbmRpbmdBbkVhc3lVSUNsYXNzIiwiVGhlRXhhbXBsZU9mVGhpc0RvY3VtZW50YXRpb24iLCJUaGVFbGVtZW50Q2xhc3MiLCJBU2ltcGxlRm9ybSIsImludHJvZHVjdGlvbiIsImZyYWdtZW50VG9TZWN0aW9uTWFwIiwiY29udGVudHMiLCJqc3hJc0dyZWF0IiwiZ2V0dGluZ1N0YXJ0ZWQiLCJhcHBlbmRpbmdFbGVtZW50c1RvVGhlRE9NIiwiZnVuY3Rpb25hbEVsZW1lbnRzIiwiZWFzeVVJRWxlbWVudHMiLCJ0aGVSZW5kZXJNZXRob2QiLCJleHRlbmRpbmdBbkVhc3lVSUNsYXNzIiwidGhlRXhhbXBsZU9mVGhpc0RvY3VtZW50YXRpb24iLCJ0aGVFbGVtZW50Q2xhc3MiLCJhU2ltcGxlRm9ybSIsImluc2VydFNlY3Rpb25zIiwiaGVhZGVyRE9NRWxlbWVudCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImhlYWRlciIsImZyb21ET01FbGVtZW50IiwiZm9yRWFjaFNlY3Rpb24iLCJzZWN0aW9uIiwiaW5zZXJ0QWZ0ZXIiLCJyZXZlYWxTZWN0aW9uIiwiaGlkZSIsImZyYWdtZW50Iiwic2hvdyIsImNhbGxiYWNrIiwiZnJhZ21lbnRzIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJvbkNoYW5nZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLFFBQVEsWUFBUjs7QUFFQUEsUUFBUSxjQUFSOztBQUVNLGFBQVNBLFFBQVEsUUFBUixDQUFUO0FBQUEsSUFDRUMsT0FERixHQUNjQyxNQURkLENBQ0VELE9BREY7OztBQUdOLElBQU1FLFdBQVdILFFBQVEsMEJBQVIsQ0FBakI7QUFBQSxJQUNNSSxlQUFlSixRQUFRLDhCQUFSLENBRHJCO0FBQUEsSUFFTUssYUFBYUwsUUFBUSw0QkFBUixDQUZuQjtBQUFBLElBR01NLGlCQUFpQk4sUUFBUSxnQ0FBUixDQUh2QjtBQUFBLElBSU1PLDRCQUE0QlAsUUFBUSwyQ0FBUixDQUpsQztBQUFBLElBS01RLHFCQUFxQlIsUUFBUSxvQ0FBUixDQUwzQjtBQUFBLElBTU1TLGlCQUFpQlQsUUFBUSxnQ0FBUixDQU52QjtBQUFBLElBT01VLGtCQUFrQlYsUUFBUSxpQ0FBUixDQVB4QjtBQUFBLElBUU1XLHlCQUF5QlgsUUFBUSx3Q0FBUixDQVIvQjtBQUFBLElBU01ZLGdDQUFnQ1osUUFBUSwrQ0FBUixDQVR0QztBQUFBLElBVU1hLGtCQUFrQmIsUUFBUSxpQ0FBUixDQVZ4QjtBQUFBLElBV01jLGNBQWNkLFFBQVEsNkJBQVIsQ0FYcEI7O0FBYUEsSUFBTWUsZUFBZSxvQkFBQyxZQUFELE9BQXJCO0FBQUEsSUFDTUMsdUJBQXVCO0FBQ3JCRCxnQkFBY0EsWUFETztBQUVyQkUsWUFBVSxvQkFBQyxRQUFELE9BRlc7QUFHckJDLGNBQVksb0JBQUMsVUFBRCxPQUhTO0FBSXJCQyxrQkFBZ0Isb0JBQUMsY0FBRCxPQUpLO0FBS3JCQyw2QkFBMkIsb0JBQUMseUJBQUQsT0FMTjtBQU1yQkMsc0JBQW9CLG9CQUFDLGtCQUFELE9BTkM7QUFPckJDLGtCQUFnQixvQkFBQyxjQUFELE9BUEs7QUFRckJDLG1CQUFpQixvQkFBQyxlQUFELE9BUkk7QUFTckJDLDBCQUF3QixvQkFBQyxzQkFBRCxPQVRIO0FBVXJCQyxpQ0FBK0Isb0JBQUMsNkJBQUQsT0FWVjtBQVdyQkMsbUJBQWlCLG9CQUFDLGVBQUQsT0FYSTtBQVlyQkMsZUFBYSxvQkFBQyxXQUFEO0FBWlEsQ0FEN0I7O0FBZ0JBLElBQU1DLGlCQUFpQixTQUFqQkEsY0FBaUIsR0FBTTtBQUMzQixNQUFNQyxtQkFBbUJDLFNBQVNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBekI7QUFBQSxNQUNNQyxTQUFTL0IsUUFBUWdDLGNBQVIsQ0FBdUJKLGdCQUF2QixDQURmOztBQUdBSyxpQkFBZSxVQUFDQyxPQUFELEVBQWE7QUFDMUJBLFlBQVFDLFdBQVIsQ0FBb0JKLE1BQXBCO0FBQ0QsR0FGRDtBQUdELENBUEQ7O0FBU0EsSUFBTUssZ0JBQWdCLFNBQWhCQSxhQUFnQixHQUFNO0FBQzFCSCxpQkFBZSxVQUFDQyxPQUFELEVBQWE7QUFDMUJBLFlBQVFHLElBQVI7QUFDRCxHQUZEOztBQUlBLE1BQU1ILFVBQVVuQixxQkFBcUJ1QixRQUFyQixLQUNLeEIsWUFEckI7O0FBR0FvQixVQUFRSyxJQUFSO0FBQ0QsQ0FURDs7QUFXQSxJQUFNTixpQkFBaUIsU0FBakJBLGNBQWlCLENBQUNPLFFBQUQsRUFBYztBQUNuQyxNQUFNQyxZQUFZQyxPQUFPQyxJQUFQLENBQVk1QixvQkFBWixDQUFsQjs7QUFFQTBCLFlBQVVHLE9BQVYsQ0FBa0IsVUFBQ04sUUFBRCxFQUFjO0FBQzlCLFFBQU1KLFVBQVVuQixxQkFBcUJ1QixRQUFyQixDQUFoQjs7QUFFQUUsYUFBU04sT0FBVDtBQUNELEdBSkQ7QUFLRCxDQVJEOztBQVVBUDs7QUFFQVcsU0FBU08sUUFBVCxDQUFrQlQsYUFBbEI7O0FBRUFBIiwiZmlsZSI6ImRvY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJ2ZyYWdtZW50ZWQnKTtcblxucmVxdWlyZSgnLi9lYXN5dWktanN4Jyk7XG5cbmNvbnN0IGVhc3l1aSA9IHJlcXVpcmUoJ2Vhc3l1aScpLFxuICAgICAgeyBFbGVtZW50IH0gPSBlYXN5dWk7XG5cbmNvbnN0IENvbnRlbnRzID0gcmVxdWlyZSgnLi9kb2NzL3NlY3Rpb25zL2NvbnRlbnRzJyksXG4gICAgICBJbnRyb2R1Y3Rpb24gPSByZXF1aXJlKCcuL2RvY3Mvc2VjdGlvbnMvaW50cm9kdWN0aW9uJyksXG4gICAgICBKU1hJc0dyZWF0ID0gcmVxdWlyZSgnLi9kb2NzL3NlY3Rpb25zL2pzeElzR3JlYXQnKSxcbiAgICAgIEdldHRpbmdTdGFydGVkID0gcmVxdWlyZSgnLi9kb2NzL3NlY3Rpb25zL2dldHRpbmdTdGFydGVkJyksXG4gICAgICBBcHBlbmRpbmdFbGVtZW50c1RvVGhlRE9NID0gcmVxdWlyZSgnLi9kb2NzL3NlY3Rpb25zL2FwcGVuZGluZ0VsZW1lbnRzVG9UaGVET00nKSxcbiAgICAgIEZ1bmN0aW9uYWxFbGVtZW50cyA9IHJlcXVpcmUoJy4vZG9jcy9zZWN0aW9ucy9mdW5jdGlvbmFsRWxlbWVudHMnKSxcbiAgICAgIEVhc3lVSUVsZW1lbnRzID0gcmVxdWlyZSgnLi9kb2NzL3NlY3Rpb25zL2Vhc3lVSUVsZW1lbnRzJyksXG4gICAgICBUaGVSZW5kZXJNZXRob2QgPSByZXF1aXJlKCcuL2RvY3Mvc2VjdGlvbnMvdGhlUmVuZGVyTWV0aG9kJyksXG4gICAgICBFeHRlbmRpbmdBbkVhc3lVSUNsYXNzID0gcmVxdWlyZSgnLi9kb2NzL3NlY3Rpb25zL2V4dGVuZGluZ0FuRWFzeVVJQ2xhc3MnKSxcbiAgICAgIFRoZUV4YW1wbGVPZlRoaXNEb2N1bWVudGF0aW9uID0gcmVxdWlyZSgnLi9kb2NzL3NlY3Rpb25zL3RoZUV4YW1wbGVPZlRoaXNEb2N1bWVudGF0aW9uJyksXG4gICAgICBUaGVFbGVtZW50Q2xhc3MgPSByZXF1aXJlKCcuL2RvY3Mvc2VjdGlvbnMvdGhlRWxlbWVudENsYXNzJyksXG4gICAgICBBU2ltcGxlRm9ybSA9IHJlcXVpcmUoJy4vZG9jcy9zZWN0aW9ucy9hU2ltcGxlRm9ybScpO1xuXG5jb25zdCBpbnRyb2R1Y3Rpb24gPSA8SW50cm9kdWN0aW9uIC8+LFxuICAgICAgZnJhZ21lbnRUb1NlY3Rpb25NYXAgPSB7XG4gICAgICAgIGludHJvZHVjdGlvbjogaW50cm9kdWN0aW9uLFxuICAgICAgICBjb250ZW50czogPENvbnRlbnRzIC8+LFxuICAgICAgICBqc3hJc0dyZWF0OiA8SlNYSXNHcmVhdCAvPixcbiAgICAgICAgZ2V0dGluZ1N0YXJ0ZWQ6IDxHZXR0aW5nU3RhcnRlZCAvPixcbiAgICAgICAgYXBwZW5kaW5nRWxlbWVudHNUb1RoZURPTTogPEFwcGVuZGluZ0VsZW1lbnRzVG9UaGVET00gLz4sXG4gICAgICAgIGZ1bmN0aW9uYWxFbGVtZW50czogPEZ1bmN0aW9uYWxFbGVtZW50cyAvPixcbiAgICAgICAgZWFzeVVJRWxlbWVudHM6IDxFYXN5VUlFbGVtZW50cyAvPixcbiAgICAgICAgdGhlUmVuZGVyTWV0aG9kOiA8VGhlUmVuZGVyTWV0aG9kIC8+LFxuICAgICAgICBleHRlbmRpbmdBbkVhc3lVSUNsYXNzOiA8RXh0ZW5kaW5nQW5FYXN5VUlDbGFzcyAvPixcbiAgICAgICAgdGhlRXhhbXBsZU9mVGhpc0RvY3VtZW50YXRpb246IDxUaGVFeGFtcGxlT2ZUaGlzRG9jdW1lbnRhdGlvbiAvPixcbiAgICAgICAgdGhlRWxlbWVudENsYXNzOiA8VGhlRWxlbWVudENsYXNzIC8+LFxuICAgICAgICBhU2ltcGxlRm9ybTogPEFTaW1wbGVGb3JtIC8+IFxuICAgICAgfTtcblxuY29uc3QgaW5zZXJ0U2VjdGlvbnMgPSAoKSA9PiB7XG4gIGNvbnN0IGhlYWRlckRPTUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkZXInKSxcbiAgICAgICAgaGVhZGVyID0gRWxlbWVudC5mcm9tRE9NRWxlbWVudChoZWFkZXJET01FbGVtZW50KTtcblxuICBmb3JFYWNoU2VjdGlvbigoc2VjdGlvbikgPT4ge1xuICAgIHNlY3Rpb24uaW5zZXJ0QWZ0ZXIoaGVhZGVyKTtcbiAgfSk7XG59O1xuXG5jb25zdCByZXZlYWxTZWN0aW9uID0gKCkgPT4ge1xuICBmb3JFYWNoU2VjdGlvbigoc2VjdGlvbikgPT4ge1xuICAgIHNlY3Rpb24uaGlkZSgpO1xuICB9KTtcblxuICBjb25zdCBzZWN0aW9uID0gZnJhZ21lbnRUb1NlY3Rpb25NYXBbZnJhZ21lbnRdIFxuICAgICAgICAgICAgICAgICAgICB8fCBpbnRyb2R1Y3Rpb247XG5cbiAgc2VjdGlvbi5zaG93KCk7XG59O1xuXG5jb25zdCBmb3JFYWNoU2VjdGlvbiA9IChjYWxsYmFjaykgPT4ge1xuICBjb25zdCBmcmFnbWVudHMgPSBPYmplY3Qua2V5cyhmcmFnbWVudFRvU2VjdGlvbk1hcCk7XG5cbiAgZnJhZ21lbnRzLmZvckVhY2goKGZyYWdtZW50KSA9PiB7XG4gICAgY29uc3Qgc2VjdGlvbiA9IGZyYWdtZW50VG9TZWN0aW9uTWFwW2ZyYWdtZW50XTtcblxuICAgIGNhbGxiYWNrKHNlY3Rpb24pO1xuICB9KTtcbn07XG5cbmluc2VydFNlY3Rpb25zKCk7XG5cbmZyYWdtZW50Lm9uQ2hhbmdlKHJldmVhbFNlY3Rpb24pO1xuXG5yZXZlYWxTZWN0aW9uKCk7XG4iXX0=