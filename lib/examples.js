'use strict';

require('../index.js'); /// easyui-jsx

require('fragmented');

var easyui = require('easyui'),
    Element = easyui.Element;


var JSXIsGreat = require('./element/jsxIsGreat'),
    Introduction = require('./element/introduction'),
    GettingStarted = require('./element/gettingStarted'),
    FunctionalElements = require('./element/functionalElements'),
    EasyUIElements = require('./element/easyUIElements'),
    TheRenderMethod = require('./element/theRenderMethod'),
    ExtendingAnEasyUIClass = require('./element/extendingAnEasyUIClass');

var introduction = React.createElement(Introduction, null),
    fragmentToSectionMap = {
  introduction: introduction,
  jsxIsGreat: React.createElement(JSXIsGreat, null),
  gettingStarted: React.createElement(GettingStarted, null),
  functionalElements: React.createElement(FunctionalElements, null),
  easyUIElements: React.createElement(EasyUIElements, null),
  theRenderMethod: React.createElement(TheRenderMethod, null),
  extendingAnEasyUIClass: React.createElement(ExtendingAnEasyUIClass, null)
};

var examples = function examples() {
  insertSections();

  fragment.onChange(showSection);

  showSection();
};

module.exports = examples;

var insertSections = function insertSections() {
  var headerDOMElement = document.querySelector('header'),
      header = Element.fromDOMElement(headerDOMElement);

  forEachSection(function (section) {
    section.insertAfter(header);
  });
};

var showSection = function showSection() {
  forEachSection(function (section) {
    section.hide();
  });

  var section = fragmentToSectionMap[fragment] || introduction;

  section.show();
};

var forEachSection = function forEachSection(callback) {
  var fragments = Object.keys(fragmentToSectionMap);

  fragments.forEach(function (fragment) {
    var section = fragmentToSectionMap[fragment];

    callback(section);
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9leGFtcGxlcy5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiRWxlbWVudCIsImVhc3l1aSIsIkpTWElzR3JlYXQiLCJJbnRyb2R1Y3Rpb24iLCJHZXR0aW5nU3RhcnRlZCIsIkZ1bmN0aW9uYWxFbGVtZW50cyIsIkVhc3lVSUVsZW1lbnRzIiwiVGhlUmVuZGVyTWV0aG9kIiwiRXh0ZW5kaW5nQW5FYXN5VUlDbGFzcyIsImludHJvZHVjdGlvbiIsImZyYWdtZW50VG9TZWN0aW9uTWFwIiwianN4SXNHcmVhdCIsImdldHRpbmdTdGFydGVkIiwiZnVuY3Rpb25hbEVsZW1lbnRzIiwiZWFzeVVJRWxlbWVudHMiLCJ0aGVSZW5kZXJNZXRob2QiLCJleHRlbmRpbmdBbkVhc3lVSUNsYXNzIiwiZXhhbXBsZXMiLCJpbnNlcnRTZWN0aW9ucyIsImZyYWdtZW50Iiwib25DaGFuZ2UiLCJzaG93U2VjdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJoZWFkZXJET01FbGVtZW50IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiaGVhZGVyIiwiZnJvbURPTUVsZW1lbnQiLCJmb3JFYWNoU2VjdGlvbiIsInNlY3Rpb24iLCJpbnNlcnRBZnRlciIsImhpZGUiLCJzaG93IiwiY2FsbGJhY2siLCJmcmFnbWVudHMiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLFFBQVEsYUFBUixFLENBQXdCOztBQUV4QkEsUUFBUSxZQUFSOztBQUVNLGFBQVNBLFFBQVEsUUFBUixDQUFUO0FBQUEsSUFDRUMsT0FERixHQUNjQyxNQURkLENBQ0VELE9BREY7OztBQUdOLElBQU1FLGFBQWFILFFBQVEsc0JBQVIsQ0FBbkI7QUFBQSxJQUNNSSxlQUFlSixRQUFRLHdCQUFSLENBRHJCO0FBQUEsSUFFTUssaUJBQWlCTCxRQUFRLDBCQUFSLENBRnZCO0FBQUEsSUFHTU0scUJBQXFCTixRQUFRLDhCQUFSLENBSDNCO0FBQUEsSUFJTU8saUJBQWlCUCxRQUFRLDBCQUFSLENBSnZCO0FBQUEsSUFLTVEsa0JBQWtCUixRQUFRLDJCQUFSLENBTHhCO0FBQUEsSUFNTVMseUJBQXlCVCxRQUFRLGtDQUFSLENBTi9COztBQVFBLElBQU1VLGVBQWUsb0JBQUMsWUFBRCxPQUFyQjtBQUFBLElBQ01DLHVCQUF1QjtBQUNyQkQsZ0JBQWNBLFlBRE87QUFFckJFLGNBQVksb0JBQUMsVUFBRCxPQUZTO0FBR3JCQyxrQkFBZ0Isb0JBQUMsY0FBRCxPQUhLO0FBSXJCQyxzQkFBb0Isb0JBQUMsa0JBQUQsT0FKQztBQUtyQkMsa0JBQWdCLG9CQUFDLGNBQUQsT0FMSztBQU1yQkMsbUJBQWlCLG9CQUFDLGVBQUQsT0FOSTtBQU9yQkMsMEJBQXdCLG9CQUFDLHNCQUFEO0FBUEgsQ0FEN0I7O0FBV0EsSUFBTUMsV0FBVyxTQUFYQSxRQUFXLEdBQU07QUFDckJDOztBQUVBQyxXQUFTQyxRQUFULENBQWtCQyxXQUFsQjs7QUFFQUE7QUFDRCxDQU5EOztBQVFBQyxPQUFPQyxPQUFQLEdBQWlCTixRQUFqQjs7QUFFQSxJQUFNQyxpQkFBaUIsU0FBakJBLGNBQWlCLEdBQU07QUFDM0IsTUFBTU0sbUJBQW1CQyxTQUFTQyxhQUFULENBQXVCLFFBQXZCLENBQXpCO0FBQUEsTUFDTUMsU0FBUzNCLFFBQVE0QixjQUFSLENBQXVCSixnQkFBdkIsQ0FEZjs7QUFHQUssaUJBQWUsVUFBQ0MsT0FBRCxFQUFhO0FBQzFCQSxZQUFRQyxXQUFSLENBQW9CSixNQUFwQjtBQUNELEdBRkQ7QUFHRCxDQVBEOztBQVNBLElBQU1OLGNBQWMsU0FBZEEsV0FBYyxHQUFNO0FBQ3hCUSxpQkFBZSxVQUFDQyxPQUFELEVBQWE7QUFDMUJBLFlBQVFFLElBQVI7QUFDRCxHQUZEOztBQUlBLE1BQU1GLFVBQVVwQixxQkFBcUJTLFFBQXJCLEtBQWtDVixZQUFsRDs7QUFFQXFCLFVBQVFHLElBQVI7QUFDRCxDQVJEOztBQVVBLElBQU1KLGlCQUFpQixTQUFqQkEsY0FBaUIsQ0FBQ0ssUUFBRCxFQUFjO0FBQ25DLE1BQU1DLFlBQVlDLE9BQU9DLElBQVAsQ0FBWTNCLG9CQUFaLENBQWxCOztBQUVBeUIsWUFBVUcsT0FBVixDQUFrQixVQUFDbkIsUUFBRCxFQUFjO0FBQzlCLFFBQU1XLFVBQVVwQixxQkFBcUJTLFFBQXJCLENBQWhCOztBQUVBZSxhQUFTSixPQUFUO0FBQ0QsR0FKRDtBQUtELENBUkQiLCJmaWxlIjoiZXhhbXBsZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4uL2luZGV4LmpzJyk7IC8vLyBlYXN5dWktanN4XG5cbnJlcXVpcmUoJ2ZyYWdtZW50ZWQnKTtcblxuY29uc3QgZWFzeXVpID0gcmVxdWlyZSgnZWFzeXVpJyksXG4gICAgICB7IEVsZW1lbnQgfSA9IGVhc3l1aTtcblxuY29uc3QgSlNYSXNHcmVhdCA9IHJlcXVpcmUoJy4vZWxlbWVudC9qc3hJc0dyZWF0JyksXG4gICAgICBJbnRyb2R1Y3Rpb24gPSByZXF1aXJlKCcuL2VsZW1lbnQvaW50cm9kdWN0aW9uJyksXG4gICAgICBHZXR0aW5nU3RhcnRlZCA9IHJlcXVpcmUoJy4vZWxlbWVudC9nZXR0aW5nU3RhcnRlZCcpLFxuICAgICAgRnVuY3Rpb25hbEVsZW1lbnRzID0gcmVxdWlyZSgnLi9lbGVtZW50L2Z1bmN0aW9uYWxFbGVtZW50cycpLFxuICAgICAgRWFzeVVJRWxlbWVudHMgPSByZXF1aXJlKCcuL2VsZW1lbnQvZWFzeVVJRWxlbWVudHMnKSxcbiAgICAgIFRoZVJlbmRlck1ldGhvZCA9IHJlcXVpcmUoJy4vZWxlbWVudC90aGVSZW5kZXJNZXRob2QnKSxcbiAgICAgIEV4dGVuZGluZ0FuRWFzeVVJQ2xhc3MgPSByZXF1aXJlKCcuL2VsZW1lbnQvZXh0ZW5kaW5nQW5FYXN5VUlDbGFzcycpO1xuXG5jb25zdCBpbnRyb2R1Y3Rpb24gPSA8SW50cm9kdWN0aW9uIC8+LFxuICAgICAgZnJhZ21lbnRUb1NlY3Rpb25NYXAgPSB7XG4gICAgICAgIGludHJvZHVjdGlvbjogaW50cm9kdWN0aW9uLFxuICAgICAgICBqc3hJc0dyZWF0OiA8SlNYSXNHcmVhdCAvPixcbiAgICAgICAgZ2V0dGluZ1N0YXJ0ZWQ6IDxHZXR0aW5nU3RhcnRlZCAvPixcbiAgICAgICAgZnVuY3Rpb25hbEVsZW1lbnRzOiA8RnVuY3Rpb25hbEVsZW1lbnRzIC8+LFxuICAgICAgICBlYXN5VUlFbGVtZW50czogPEVhc3lVSUVsZW1lbnRzIC8+LFxuICAgICAgICB0aGVSZW5kZXJNZXRob2Q6IDxUaGVSZW5kZXJNZXRob2QgLz4sXG4gICAgICAgIGV4dGVuZGluZ0FuRWFzeVVJQ2xhc3M6IDxFeHRlbmRpbmdBbkVhc3lVSUNsYXNzIC8+XG4gICAgICB9O1xuXG5jb25zdCBleGFtcGxlcyA9ICgpID0+IHtcbiAgaW5zZXJ0U2VjdGlvbnMoKTtcblxuICBmcmFnbWVudC5vbkNoYW5nZShzaG93U2VjdGlvbik7XG5cbiAgc2hvd1NlY3Rpb24oKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhhbXBsZXM7XG5cbmNvbnN0IGluc2VydFNlY3Rpb25zID0gKCkgPT4ge1xuICBjb25zdCBoZWFkZXJET01FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZGVyJyksXG4gICAgICAgIGhlYWRlciA9IEVsZW1lbnQuZnJvbURPTUVsZW1lbnQoaGVhZGVyRE9NRWxlbWVudCk7XG5cbiAgZm9yRWFjaFNlY3Rpb24oKHNlY3Rpb24pID0+IHtcbiAgICBzZWN0aW9uLmluc2VydEFmdGVyKGhlYWRlcik7XG4gIH0pO1xufTtcblxuY29uc3Qgc2hvd1NlY3Rpb24gPSAoKSA9PiB7XG4gIGZvckVhY2hTZWN0aW9uKChzZWN0aW9uKSA9PiB7XG4gICAgc2VjdGlvbi5oaWRlKCk7XG4gIH0pO1xuXG4gIGNvbnN0IHNlY3Rpb24gPSBmcmFnbWVudFRvU2VjdGlvbk1hcFtmcmFnbWVudF0gfHwgaW50cm9kdWN0aW9uO1xuXG4gIHNlY3Rpb24uc2hvdygpO1xufTtcblxuY29uc3QgZm9yRWFjaFNlY3Rpb24gPSAoY2FsbGJhY2spID0+IHtcbiAgY29uc3QgZnJhZ21lbnRzID0gT2JqZWN0LmtleXMoZnJhZ21lbnRUb1NlY3Rpb25NYXApO1xuXG4gIGZyYWdtZW50cy5mb3JFYWNoKChmcmFnbWVudCkgPT4ge1xuICAgIGNvbnN0IHNlY3Rpb24gPSBmcmFnbWVudFRvU2VjdGlvbk1hcFtmcmFnbWVudF07XG5cbiAgICBjYWxsYmFjayhzZWN0aW9uKTtcbiAgfSk7XG59O1xuIl19