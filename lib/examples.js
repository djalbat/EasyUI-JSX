'use strict';

require('../index.js'); /// easyui-jsx

require('fragmented');

var easyui = require('easyui'),
    Element = easyui.Element;


var JSXIsGreat = require('./element/jsxIsGreat'),
    Introduction = require('./element/introduction'),
    GettingStarted = require('./element/gettingStarted'),
    FunctionalElements = require('./element/functionalElements'),
    EasyUIElements = require('./element/easyUIElements'),
    TheRenderMethod = require('./element/theRenderMethod');

var introduction = React.createElement(Introduction, null),
    fragmentToSectionMap = {
  introduction: introduction,
  jsxIsGreat: React.createElement(JSXIsGreat, null),
  gettingStarted: React.createElement(GettingStarted, null),
  functionalElements: React.createElement(FunctionalElements, null),
  easyUIElements: React.createElement(EasyUIElements, null),
  theRenderMethod: React.createElement(TheRenderMethod, null)
};

var examples = function examples() {
  insertSections();

  fragment.onChange(showSection);

  showSection();
};

module.exports = examples;

var insertSections = function insertSections() {
  var headerDOMElement = document.querySelector('header'),
      header = Element.fromDOMElement(headerDOMElement);

  forEachSection(function (section) {
    section.insertAfter(header);
  });
};

var showSection = function showSection() {
  forEachSection(function (section) {
    section.hide();
  });

  var section = fragmentToSectionMap[fragment] || introduction;

  section.show();
};

var forEachSection = function forEachSection(callback) {
  var fragments = Object.keys(fragmentToSectionMap);

  fragments.forEach(function (fragment) {
    var section = fragmentToSectionMap[fragment];

    callback(section);
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9leGFtcGxlcy5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiRWxlbWVudCIsImVhc3l1aSIsIkpTWElzR3JlYXQiLCJJbnRyb2R1Y3Rpb24iLCJHZXR0aW5nU3RhcnRlZCIsIkZ1bmN0aW9uYWxFbGVtZW50cyIsIkVhc3lVSUVsZW1lbnRzIiwiVGhlUmVuZGVyTWV0aG9kIiwiaW50cm9kdWN0aW9uIiwiZnJhZ21lbnRUb1NlY3Rpb25NYXAiLCJqc3hJc0dyZWF0IiwiZ2V0dGluZ1N0YXJ0ZWQiLCJmdW5jdGlvbmFsRWxlbWVudHMiLCJlYXN5VUlFbGVtZW50cyIsInRoZVJlbmRlck1ldGhvZCIsImV4YW1wbGVzIiwiaW5zZXJ0U2VjdGlvbnMiLCJmcmFnbWVudCIsIm9uQ2hhbmdlIiwic2hvd1NlY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwiaGVhZGVyRE9NRWxlbWVudCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImhlYWRlciIsImZyb21ET01FbGVtZW50IiwiZm9yRWFjaFNlY3Rpb24iLCJzZWN0aW9uIiwiaW5zZXJ0QWZ0ZXIiLCJoaWRlIiwic2hvdyIsImNhbGxiYWNrIiwiZnJhZ21lbnRzIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxRQUFRLGFBQVIsRSxDQUF3Qjs7QUFFeEJBLFFBQVEsWUFBUjs7QUFFTSxhQUFTQSxRQUFRLFFBQVIsQ0FBVDtBQUFBLElBQ0VDLE9BREYsR0FDY0MsTUFEZCxDQUNFRCxPQURGOzs7QUFHTixJQUFNRSxhQUFhSCxRQUFRLHNCQUFSLENBQW5CO0FBQUEsSUFDTUksZUFBZUosUUFBUSx3QkFBUixDQURyQjtBQUFBLElBRU1LLGlCQUFpQkwsUUFBUSwwQkFBUixDQUZ2QjtBQUFBLElBR01NLHFCQUFxQk4sUUFBUSw4QkFBUixDQUgzQjtBQUFBLElBSU1PLGlCQUFpQlAsUUFBUSwwQkFBUixDQUp2QjtBQUFBLElBS01RLGtCQUFrQlIsUUFBUSwyQkFBUixDQUx4Qjs7QUFPQSxJQUFNUyxlQUFlLG9CQUFDLFlBQUQsT0FBckI7QUFBQSxJQUNNQyx1QkFBdUI7QUFDckJELGdCQUFjQSxZQURPO0FBRXJCRSxjQUFZLG9CQUFDLFVBQUQsT0FGUztBQUdyQkMsa0JBQWdCLG9CQUFDLGNBQUQsT0FISztBQUlyQkMsc0JBQW9CLG9CQUFDLGtCQUFELE9BSkM7QUFLckJDLGtCQUFnQixvQkFBQyxjQUFELE9BTEs7QUFNckJDLG1CQUFpQixvQkFBQyxlQUFEO0FBTkksQ0FEN0I7O0FBVUEsSUFBTUMsV0FBVyxTQUFYQSxRQUFXLEdBQU07QUFDckJDOztBQUVBQyxXQUFTQyxRQUFULENBQWtCQyxXQUFsQjs7QUFFQUE7QUFDRCxDQU5EOztBQVFBQyxPQUFPQyxPQUFQLEdBQWlCTixRQUFqQjs7QUFFQSxJQUFNQyxpQkFBaUIsU0FBakJBLGNBQWlCLEdBQU07QUFDM0IsTUFBTU0sbUJBQW1CQyxTQUFTQyxhQUFULENBQXVCLFFBQXZCLENBQXpCO0FBQUEsTUFDTUMsU0FBU3pCLFFBQVEwQixjQUFSLENBQXVCSixnQkFBdkIsQ0FEZjs7QUFHQUssaUJBQWUsVUFBQ0MsT0FBRCxFQUFhO0FBQzFCQSxZQUFRQyxXQUFSLENBQW9CSixNQUFwQjtBQUNELEdBRkQ7QUFHRCxDQVBEOztBQVNBLElBQU1OLGNBQWMsU0FBZEEsV0FBYyxHQUFNO0FBQ3hCUSxpQkFBZSxVQUFDQyxPQUFELEVBQWE7QUFDMUJBLFlBQVFFLElBQVI7QUFDRCxHQUZEOztBQUlBLE1BQU1GLFVBQVVuQixxQkFBcUJRLFFBQXJCLEtBQWtDVCxZQUFsRDs7QUFFQW9CLFVBQVFHLElBQVI7QUFDRCxDQVJEOztBQVVBLElBQU1KLGlCQUFpQixTQUFqQkEsY0FBaUIsQ0FBQ0ssUUFBRCxFQUFjO0FBQ25DLE1BQU1DLFlBQVlDLE9BQU9DLElBQVAsQ0FBWTFCLG9CQUFaLENBQWxCOztBQUVBd0IsWUFBVUcsT0FBVixDQUFrQixVQUFDbkIsUUFBRCxFQUFjO0FBQzlCLFFBQU1XLFVBQVVuQixxQkFBcUJRLFFBQXJCLENBQWhCOztBQUVBZSxhQUFTSixPQUFUO0FBQ0QsR0FKRDtBQUtELENBUkQiLCJmaWxlIjoiZXhhbXBsZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4uL2luZGV4LmpzJyk7IC8vLyBlYXN5dWktanN4XG5cbnJlcXVpcmUoJ2ZyYWdtZW50ZWQnKTtcblxuY29uc3QgZWFzeXVpID0gcmVxdWlyZSgnZWFzeXVpJyksXG4gICAgICB7IEVsZW1lbnQgfSA9IGVhc3l1aTtcblxuY29uc3QgSlNYSXNHcmVhdCA9IHJlcXVpcmUoJy4vZWxlbWVudC9qc3hJc0dyZWF0JyksXG4gICAgICBJbnRyb2R1Y3Rpb24gPSByZXF1aXJlKCcuL2VsZW1lbnQvaW50cm9kdWN0aW9uJyksXG4gICAgICBHZXR0aW5nU3RhcnRlZCA9IHJlcXVpcmUoJy4vZWxlbWVudC9nZXR0aW5nU3RhcnRlZCcpLFxuICAgICAgRnVuY3Rpb25hbEVsZW1lbnRzID0gcmVxdWlyZSgnLi9lbGVtZW50L2Z1bmN0aW9uYWxFbGVtZW50cycpLFxuICAgICAgRWFzeVVJRWxlbWVudHMgPSByZXF1aXJlKCcuL2VsZW1lbnQvZWFzeVVJRWxlbWVudHMnKSxcbiAgICAgIFRoZVJlbmRlck1ldGhvZCA9IHJlcXVpcmUoJy4vZWxlbWVudC90aGVSZW5kZXJNZXRob2QnKTtcblxuY29uc3QgaW50cm9kdWN0aW9uID0gPEludHJvZHVjdGlvbiAvPixcbiAgICAgIGZyYWdtZW50VG9TZWN0aW9uTWFwID0ge1xuICAgICAgICBpbnRyb2R1Y3Rpb246IGludHJvZHVjdGlvbixcbiAgICAgICAganN4SXNHcmVhdDogPEpTWElzR3JlYXQgLz4sXG4gICAgICAgIGdldHRpbmdTdGFydGVkOiA8R2V0dGluZ1N0YXJ0ZWQgLz4sXG4gICAgICAgIGZ1bmN0aW9uYWxFbGVtZW50czogPEZ1bmN0aW9uYWxFbGVtZW50cyAvPixcbiAgICAgICAgZWFzeVVJRWxlbWVudHM6IDxFYXN5VUlFbGVtZW50cyAvPixcbiAgICAgICAgdGhlUmVuZGVyTWV0aG9kOiA8VGhlUmVuZGVyTWV0aG9kIC8+XG4gICAgICB9O1xuXG5jb25zdCBleGFtcGxlcyA9ICgpID0+IHtcbiAgaW5zZXJ0U2VjdGlvbnMoKTtcblxuICBmcmFnbWVudC5vbkNoYW5nZShzaG93U2VjdGlvbik7XG5cbiAgc2hvd1NlY3Rpb24oKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhhbXBsZXM7XG5cbmNvbnN0IGluc2VydFNlY3Rpb25zID0gKCkgPT4ge1xuICBjb25zdCBoZWFkZXJET01FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZGVyJyksXG4gICAgICAgIGhlYWRlciA9IEVsZW1lbnQuZnJvbURPTUVsZW1lbnQoaGVhZGVyRE9NRWxlbWVudCk7XG5cbiAgZm9yRWFjaFNlY3Rpb24oKHNlY3Rpb24pID0+IHtcbiAgICBzZWN0aW9uLmluc2VydEFmdGVyKGhlYWRlcik7XG4gIH0pO1xufTtcblxuY29uc3Qgc2hvd1NlY3Rpb24gPSAoKSA9PiB7XG4gIGZvckVhY2hTZWN0aW9uKChzZWN0aW9uKSA9PiB7XG4gICAgc2VjdGlvbi5oaWRlKCk7XG4gIH0pO1xuXG4gIGNvbnN0IHNlY3Rpb24gPSBmcmFnbWVudFRvU2VjdGlvbk1hcFtmcmFnbWVudF0gfHwgaW50cm9kdWN0aW9uO1xuXG4gIHNlY3Rpb24uc2hvdygpO1xufTtcblxuY29uc3QgZm9yRWFjaFNlY3Rpb24gPSAoY2FsbGJhY2spID0+IHtcbiAgY29uc3QgZnJhZ21lbnRzID0gT2JqZWN0LmtleXMoZnJhZ21lbnRUb1NlY3Rpb25NYXApO1xuXG4gIGZyYWdtZW50cy5mb3JFYWNoKChmcmFnbWVudCkgPT4ge1xuICAgIGNvbnN0IHNlY3Rpb24gPSBmcmFnbWVudFRvU2VjdGlvbk1hcFtmcmFnbWVudF07XG5cbiAgICBjYWxsYmFjayhzZWN0aW9uKTtcbiAgfSk7XG59O1xuIl19