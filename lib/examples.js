'use strict';

require('../index.js'); /// easyui-jsx

require('fragmented');

var easyui = require('easyui'),
    Element = easyui.Element;


var Contents = require('./element/contents'),
    Introduction = require('./element/introduction'),
    JSXIsGreat = require('./element/jsxIsGreat'),
    GettingStarted = require('./element/gettingStarted'),
    FunctionalElements = require('./element/functionalElements'),
    EasyUIElements = require('./element/easyUIElements'),
    TheRenderMethod = require('./element/theRenderMethod'),
    ExtendingAnEasyUIClass = require('./element/extendingAnEasyUIClass');

var introduction = React.createElement(Introduction, null),
    fragmentToSectionMap = {
  introduction: introduction,
  contents: React.createElement(Contents, null),
  jsxIsGreat: React.createElement(JSXIsGreat, null),
  gettingStarted: React.createElement(GettingStarted, null),
  functionalElements: React.createElement(FunctionalElements, null),
  easyUIElements: React.createElement(EasyUIElements, null),
  theRenderMethod: React.createElement(TheRenderMethod, null),
  extendingAnEasyUIClass: React.createElement(ExtendingAnEasyUIClass, null)
};

var examples = function examples() {
  insertSections();

  fragment.onChange(showSection);

  showSection();
};

module.exports = examples;

var insertSections = function insertSections() {
  var headerDOMElement = document.querySelector('header'),
      header = Element.fromDOMElement(headerDOMElement);

  forEachSection(function (section) {
    section.insertAfter(header);
  });
};

var showSection = function showSection() {
  forEachSection(function (section) {
    section.hide();
  });

  var section = fragmentToSectionMap[fragment] || introduction;

  section.show();
};

var forEachSection = function forEachSection(callback) {
  var fragments = Object.keys(fragmentToSectionMap);

  fragments.forEach(function (fragment) {
    var section = fragmentToSectionMap[fragment];

    callback(section);
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9leGFtcGxlcy5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiRWxlbWVudCIsImVhc3l1aSIsIkNvbnRlbnRzIiwiSW50cm9kdWN0aW9uIiwiSlNYSXNHcmVhdCIsIkdldHRpbmdTdGFydGVkIiwiRnVuY3Rpb25hbEVsZW1lbnRzIiwiRWFzeVVJRWxlbWVudHMiLCJUaGVSZW5kZXJNZXRob2QiLCJFeHRlbmRpbmdBbkVhc3lVSUNsYXNzIiwiaW50cm9kdWN0aW9uIiwiZnJhZ21lbnRUb1NlY3Rpb25NYXAiLCJjb250ZW50cyIsImpzeElzR3JlYXQiLCJnZXR0aW5nU3RhcnRlZCIsImZ1bmN0aW9uYWxFbGVtZW50cyIsImVhc3lVSUVsZW1lbnRzIiwidGhlUmVuZGVyTWV0aG9kIiwiZXh0ZW5kaW5nQW5FYXN5VUlDbGFzcyIsImV4YW1wbGVzIiwiaW5zZXJ0U2VjdGlvbnMiLCJmcmFnbWVudCIsIm9uQ2hhbmdlIiwic2hvd1NlY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwiaGVhZGVyRE9NRWxlbWVudCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImhlYWRlciIsImZyb21ET01FbGVtZW50IiwiZm9yRWFjaFNlY3Rpb24iLCJzZWN0aW9uIiwiaW5zZXJ0QWZ0ZXIiLCJoaWRlIiwic2hvdyIsImNhbGxiYWNrIiwiZnJhZ21lbnRzIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxRQUFRLGFBQVIsRSxDQUF3Qjs7QUFFeEJBLFFBQVEsWUFBUjs7QUFFTSxhQUFTQSxRQUFRLFFBQVIsQ0FBVDtBQUFBLElBQ0VDLE9BREYsR0FDY0MsTUFEZCxDQUNFRCxPQURGOzs7QUFHTixJQUFNRSxXQUFXSCxRQUFRLG9CQUFSLENBQWpCO0FBQUEsSUFDTUksZUFBZUosUUFBUSx3QkFBUixDQURyQjtBQUFBLElBRU1LLGFBQWFMLFFBQVEsc0JBQVIsQ0FGbkI7QUFBQSxJQUdNTSxpQkFBaUJOLFFBQVEsMEJBQVIsQ0FIdkI7QUFBQSxJQUlNTyxxQkFBcUJQLFFBQVEsOEJBQVIsQ0FKM0I7QUFBQSxJQUtNUSxpQkFBaUJSLFFBQVEsMEJBQVIsQ0FMdkI7QUFBQSxJQU1NUyxrQkFBa0JULFFBQVEsMkJBQVIsQ0FOeEI7QUFBQSxJQU9NVSx5QkFBeUJWLFFBQVEsa0NBQVIsQ0FQL0I7O0FBU0EsSUFBTVcsZUFBZSxvQkFBQyxZQUFELE9BQXJCO0FBQUEsSUFDTUMsdUJBQXVCO0FBQ3JCRCxnQkFBY0EsWUFETztBQUVyQkUsWUFBVSxvQkFBQyxRQUFELE9BRlc7QUFHckJDLGNBQVksb0JBQUMsVUFBRCxPQUhTO0FBSXJCQyxrQkFBZ0Isb0JBQUMsY0FBRCxPQUpLO0FBS3JCQyxzQkFBb0Isb0JBQUMsa0JBQUQsT0FMQztBQU1yQkMsa0JBQWdCLG9CQUFDLGNBQUQsT0FOSztBQU9yQkMsbUJBQWlCLG9CQUFDLGVBQUQsT0FQSTtBQVFyQkMsMEJBQXdCLG9CQUFDLHNCQUFEO0FBUkgsQ0FEN0I7O0FBWUEsSUFBTUMsV0FBVyxTQUFYQSxRQUFXLEdBQU07QUFDckJDOztBQUVBQyxXQUFTQyxRQUFULENBQWtCQyxXQUFsQjs7QUFFQUE7QUFDRCxDQU5EOztBQVFBQyxPQUFPQyxPQUFQLEdBQWlCTixRQUFqQjs7QUFFQSxJQUFNQyxpQkFBaUIsU0FBakJBLGNBQWlCLEdBQU07QUFDM0IsTUFBTU0sbUJBQW1CQyxTQUFTQyxhQUFULENBQXVCLFFBQXZCLENBQXpCO0FBQUEsTUFDTUMsU0FBUzdCLFFBQVE4QixjQUFSLENBQXVCSixnQkFBdkIsQ0FEZjs7QUFHQUssaUJBQWUsVUFBQ0MsT0FBRCxFQUFhO0FBQzFCQSxZQUFRQyxXQUFSLENBQW9CSixNQUFwQjtBQUNELEdBRkQ7QUFHRCxDQVBEOztBQVNBLElBQU1OLGNBQWMsU0FBZEEsV0FBYyxHQUFNO0FBQ3hCUSxpQkFBZSxVQUFDQyxPQUFELEVBQWE7QUFDMUJBLFlBQVFFLElBQVI7QUFDRCxHQUZEOztBQUlBLE1BQU1GLFVBQVVyQixxQkFBcUJVLFFBQXJCLEtBQWtDWCxZQUFsRDs7QUFFQXNCLFVBQVFHLElBQVI7QUFDRCxDQVJEOztBQVVBLElBQU1KLGlCQUFpQixTQUFqQkEsY0FBaUIsQ0FBQ0ssUUFBRCxFQUFjO0FBQ25DLE1BQU1DLFlBQVlDLE9BQU9DLElBQVAsQ0FBWTVCLG9CQUFaLENBQWxCOztBQUVBMEIsWUFBVUcsT0FBVixDQUFrQixVQUFDbkIsUUFBRCxFQUFjO0FBQzlCLFFBQU1XLFVBQVVyQixxQkFBcUJVLFFBQXJCLENBQWhCOztBQUVBZSxhQUFTSixPQUFUO0FBQ0QsR0FKRDtBQUtELENBUkQiLCJmaWxlIjoiZXhhbXBsZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4uL2luZGV4LmpzJyk7IC8vLyBlYXN5dWktanN4XG5cbnJlcXVpcmUoJ2ZyYWdtZW50ZWQnKTtcblxuY29uc3QgZWFzeXVpID0gcmVxdWlyZSgnZWFzeXVpJyksXG4gICAgICB7IEVsZW1lbnQgfSA9IGVhc3l1aTtcblxuY29uc3QgQ29udGVudHMgPSByZXF1aXJlKCcuL2VsZW1lbnQvY29udGVudHMnKSxcbiAgICAgIEludHJvZHVjdGlvbiA9IHJlcXVpcmUoJy4vZWxlbWVudC9pbnRyb2R1Y3Rpb24nKSxcbiAgICAgIEpTWElzR3JlYXQgPSByZXF1aXJlKCcuL2VsZW1lbnQvanN4SXNHcmVhdCcpLFxuICAgICAgR2V0dGluZ1N0YXJ0ZWQgPSByZXF1aXJlKCcuL2VsZW1lbnQvZ2V0dGluZ1N0YXJ0ZWQnKSxcbiAgICAgIEZ1bmN0aW9uYWxFbGVtZW50cyA9IHJlcXVpcmUoJy4vZWxlbWVudC9mdW5jdGlvbmFsRWxlbWVudHMnKSxcbiAgICAgIEVhc3lVSUVsZW1lbnRzID0gcmVxdWlyZSgnLi9lbGVtZW50L2Vhc3lVSUVsZW1lbnRzJyksXG4gICAgICBUaGVSZW5kZXJNZXRob2QgPSByZXF1aXJlKCcuL2VsZW1lbnQvdGhlUmVuZGVyTWV0aG9kJyksXG4gICAgICBFeHRlbmRpbmdBbkVhc3lVSUNsYXNzID0gcmVxdWlyZSgnLi9lbGVtZW50L2V4dGVuZGluZ0FuRWFzeVVJQ2xhc3MnKTtcblxuY29uc3QgaW50cm9kdWN0aW9uID0gPEludHJvZHVjdGlvbiAvPixcbiAgICAgIGZyYWdtZW50VG9TZWN0aW9uTWFwID0ge1xuICAgICAgICBpbnRyb2R1Y3Rpb246IGludHJvZHVjdGlvbixcbiAgICAgICAgY29udGVudHM6IDxDb250ZW50cyAvPixcbiAgICAgICAganN4SXNHcmVhdDogPEpTWElzR3JlYXQgLz4sXG4gICAgICAgIGdldHRpbmdTdGFydGVkOiA8R2V0dGluZ1N0YXJ0ZWQgLz4sXG4gICAgICAgIGZ1bmN0aW9uYWxFbGVtZW50czogPEZ1bmN0aW9uYWxFbGVtZW50cyAvPixcbiAgICAgICAgZWFzeVVJRWxlbWVudHM6IDxFYXN5VUlFbGVtZW50cyAvPixcbiAgICAgICAgdGhlUmVuZGVyTWV0aG9kOiA8VGhlUmVuZGVyTWV0aG9kIC8+LFxuICAgICAgICBleHRlbmRpbmdBbkVhc3lVSUNsYXNzOiA8RXh0ZW5kaW5nQW5FYXN5VUlDbGFzcyAvPlxuICAgICAgfTtcblxuY29uc3QgZXhhbXBsZXMgPSAoKSA9PiB7XG4gIGluc2VydFNlY3Rpb25zKCk7XG5cbiAgZnJhZ21lbnQub25DaGFuZ2Uoc2hvd1NlY3Rpb24pO1xuXG4gIHNob3dTZWN0aW9uKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4YW1wbGVzO1xuXG5jb25zdCBpbnNlcnRTZWN0aW9ucyA9ICgpID0+IHtcbiAgY29uc3QgaGVhZGVyRE9NRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWRlcicpLFxuICAgICAgICBoZWFkZXIgPSBFbGVtZW50LmZyb21ET01FbGVtZW50KGhlYWRlckRPTUVsZW1lbnQpO1xuXG4gIGZvckVhY2hTZWN0aW9uKChzZWN0aW9uKSA9PiB7XG4gICAgc2VjdGlvbi5pbnNlcnRBZnRlcihoZWFkZXIpO1xuICB9KTtcbn07XG5cbmNvbnN0IHNob3dTZWN0aW9uID0gKCkgPT4ge1xuICBmb3JFYWNoU2VjdGlvbigoc2VjdGlvbikgPT4ge1xuICAgIHNlY3Rpb24uaGlkZSgpO1xuICB9KTtcblxuICBjb25zdCBzZWN0aW9uID0gZnJhZ21lbnRUb1NlY3Rpb25NYXBbZnJhZ21lbnRdIHx8IGludHJvZHVjdGlvbjtcblxuICBzZWN0aW9uLnNob3coKTtcbn07XG5cbmNvbnN0IGZvckVhY2hTZWN0aW9uID0gKGNhbGxiYWNrKSA9PiB7XG4gIGNvbnN0IGZyYWdtZW50cyA9IE9iamVjdC5rZXlzKGZyYWdtZW50VG9TZWN0aW9uTWFwKTtcblxuICBmcmFnbWVudHMuZm9yRWFjaCgoZnJhZ21lbnQpID0+IHtcbiAgICBjb25zdCBzZWN0aW9uID0gZnJhZ21lbnRUb1NlY3Rpb25NYXBbZnJhZ21lbnRdO1xuXG4gICAgY2FsbGJhY2soc2VjdGlvbik7XG4gIH0pO1xufTtcbiJdfQ==